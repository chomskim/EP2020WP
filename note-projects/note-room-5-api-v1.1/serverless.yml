service: ep2020-notes-room-api

# Create an optimized package for our functions
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: ap-northeast-2

  # These environment variables are made available to our functions
  # under process.env.
  environment:
    DYNAMODB_TABLE: ep2020-notes-room

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Scan
        - dynamodb:Query
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:DescribeTable
      # Restrict our IAM role permissions to
      # the specific table for the stage
      Resource:
        - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"

functions:
  # Defines an HTTP API endpoint that calls the main function in create.js
  # - path: url path is /room
  # - method: POST request
  # - cors: enabled CORS (Cross-Origin Resource Sharing) for browser cross
  #     domain api call
  # - authorizer: authenticate using the AWS IAM role
  create:
    handler: create.main
    events:
      - http:
          path: room
          method: post
          cors: true
          authorizer: aws_iam

  get:
    # Defines an HTTP API endpoint that calls the main function in get.js
    # - path: url path is /room/{id}
    # - method: GET request
    handler: get.main
    events:
      - http:
          path: room/{id}
          method: get
          cors: true
          authorizer: aws_iam

  list:
    # Defines an HTTP API endpoint that calls the main function in list.js
    # - path: url path is /room
    # - method: GET request
    handler: list.main
    events:
      - http:
          path: room
          method: get
          cors: true
          authorizer: aws_iam

  update:
    # Defines an HTTP API endpoint that calls the main function in update.js
    # - path: url path is /room/{id}
    # - method: PUT request
    handler: update.main
    events:
      - http:
          path: room/{id}
          method: put
          cors: true
          authorizer: aws_iam

  delete:
    # Defines an HTTP API endpoint that calls the main function in delete.js
    # - path: url path is /room/{id}
    # - method: DELETE request
    handler: delete.main
    events:
      - http:
          path: room/{id}
          method: delete
          cors: true
          authorizer: aws_iam

  listbyOwner:
    # Defines an HTTP API endpoint that calls the main function in listbyOwner.js
    # - path: url path is /room
    # - method: GET request
    handler: listbyOwner.main
    events:
      - http:
          path: room/owner/{owner}
          method: get
          cors: true
          authorizer: aws_iam

  listbyMember:
    # Defines an HTTP API endpoint that calls the main function in listbyMember.js
    # - path: url path is room/by/{email}
    # - method: GET request
    handler: listbyMember.main
    events:
      - http:
          path: room/member/{member}
          method: get
          cors: true
          authorizer: aws_iam
# Create our resources with separate CloudFormation templates
resources:
  # API Gateway Errors
  - ${file(resources/api-gateway-errors.yml)}
  # Cognito Identity Pool Policy
  #- ${file(resources/cognito-policy.yml)}
